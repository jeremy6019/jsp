

** jquery에서의 ajax 
=> 순수 자바스크립트 코드로 작성하는 것보다 코드의 길이가 짧고 하나의 메소드에서 모든 설정을 전
부할 수 있음 
=> json의 경우는 결과를 파싱된 상태로 가져옵니다. 
JSON.parse(json문자열)을 호출해서 파싱할 필요가 없습니다. 
=> 가독성은 떨어질 수 있습니다.
 
1.jquery를 사용하는 방법 
1)jquery 나 다른 사이트에서 제공하는 링크를 직접 설정 
=>프로젝트의 크기는 줄어들지만 인터넷이 안되면 사용할 수 없음 

2)jquery를 다운로드 받아서 프로젝트에 포함시켜서 사용 
=>프로젝트의 크기는 늘어나지만 인터넷이 안되도 사용가능 

2.텍스트 파일을 읽어서 출력하기 
$(선택자).load(파일경로): 파일경로에 해당하는 내용을 읽어서 선택자에 출력 
=> 파일의 내용은 대부분 서버에서 생성해서 사용합니다. 
직접 작성하지 않습니다. 
=>html파일의 경우는 body의 내용을 읽어옵니다. 
html 파일의 경우는 파일경로 뒤에 태그를 작성하면 태그의 내용만 가져옵니다. 

=>검사 창에서 404에러가 보이면 파일의 경로가 잘못된 것입니다. 
404에러인 경우는 당분간은 파일의 경로를 확인하고 나중에는 파일의 경로와 요청경로를 확인해야
합니다. 
=>iframe을 이용해서 내용을 가져오는 것은 동기적으로 동작하지만 ajax는 비동기 방식입니다. 

3.데이터를 가져와서 활용 
=>여러가지 메소드가 있는데 쉽게 사용할 수 있는 범용 메소드는 $.ajax({옵션})
=>중요한 옵션 
url: 요청할 url
data: 파라미터를 설정하는 것으로 {파라미터이름:파라미터 값,....}의 형태로 작성 
type:GET이나 POST로 요청 방식을 설정 - 기본은 GET 
datatype: 결과로 받아올 데이터의 종류 (text, xml,json 등) 
success: 성공했을 때 호출될 함수를 지정 - 매개변수가 1개 있는 함수를 지정 
                매개변수는 받아온 데이터인데 json의 경우는 파싱된 결과. 
error: 데이터를 가져오지 못했을 때 호출될 함수를 지정 - 매개변수가 3개이고 2번째 매개변수가 에러
발생이유를 문자열로 전달 

=>파라미터를 만들때 url에 만들때는 직접 인코딩을 해야하지만 data에 설정하면 인코딩을 하지 않아도
자동으로 해줍니다. 

**jquery 사용하는 이유 
1.cross browsing 구현이 쉽기 때문 
2. 다양한 플러그인 때문에 


** Java Web Programming 을 하기 위한 준비 
1.JDK(Java Development Kit- 자바 개발 도구)를 설치
=>오라클에서 다운로드 받아서 설치 
=>Open JDK를 받아서 설치 

1)JAVA_HOME 환경변수를 생성해서 추가 
=>java 설치 디렉토리를 간략하게 사용할 수 있도록 하기 위해서 등록 

2) path라는 디렉토리에 jdk의 bin 디렉토리 경로를 추가 
=>java 명령어를 짧게 명령어만으로 콘솔이나 터미널에서 사용하기 위해서 설정 
=>mac에서는 할 필요가 없음 
=>mac은자바를 설치하면 자바의 명령어 디렉토리를 path에 자동 추가 

3)JRE_HOME이라는 환경변수를 추가하고 JRE디렉토리 경로를 추가 
=>자바로 만들어진 프로그램이 자바실행환경 디렉토리를 찾기 위해서 설정 
=> 대부분의 경우는 설정을 하지 않아도 되는데 자바를 여러개 설치한 경우 어떤 버전에서 실행할 것인지
지정할 때 사용 

4)classpath라는 환경변수를 추가하고 경로를 추가 
=>자바 프로그램이 클래스를 찾는 순서입니다. 
=> ./java 파일 경로...

2.IDE(통합개발도구) 를 설치 
1)Eclipse: 무료 
=>Java EE버전으로 설치해야 웹 프로그래밍을 할 수 있음 
=>STS(Spring Tool Suite), 전자정부프레임워크 등은 전부 Eclipse 기반  
=>다양한 플러그인 지원

2)Intelli J 
=>무료버전으로는 자바 개발과 안드로이드 개발만 가능 
=> 상용화된 버전을 구입해야만 웹 프로그램밍이 가능 
=>코드 센스 기능이나 파라미터 설정 등이 Eclipse보다 잘 되어 있음 
=> 작은 규모의 프로젝트에서는 사용 비율이 높아지고 있음 

3.Web Server 
=>사용자가 URL요청을 했을 때 URL에 해당하는 컴포넌트를 찾아서 전달해주는 프로그램 
=>HTML만 전송이 가능 
=>Apache, Linux, IIs(Windows 운영체제를 기반으로 만들어진 웹서버) 

4.Web Application server 
=>web server가 호출해서 일반 프로그래밍 언어로 만들어진 프로그램을 실행하고 그 결과를 HTML로
다시 webserver에게 전달하는 프로그램 
=>java해석이 가능한 WAS: tomcat, weblogic, 제우스 등 

5.Database 
=>DB Server나 접속할 수 있는 계정 
=>접속 프로그램 
=> 우리는 DBever이용해서 Oracle과 MySQL을 사용 
=>MongoDB는 직접 설치하거나 접속도구를 이용해서 사용 

** Eclipse 설정 
=>mac에서는 브라우저 설정만 하면 됩니다. 
=>window에서는 설정을 조금 추가해야 합니다. 
1)브라우저를 외부 브라우저를 설정 
=>eclipse내장 브라우저는 IE하위버전과 유사하게 동작 

2)text file encoding설정 
=>소스코드의 인코딩 설정 
=>windows 와 mac에서 같이 사용하고자 할 때는 utf-8 
=>utf-8로 설정하지 않으면 웹에서 제대로 읽어내지 못할 수 있습니다. 

3)css,html,jsp파일의 encoding설정 

**HttpServlet & JSP(Java Server Pages) 
1. HttpServlet 
=>URL을 이용해서 호출할 수 있는 Java Class 
=>컴파일이 된 .class형태로 존재하다가 첫번째 요청이 오면 Instance를 생성하고 요청을 처리 
이 인스턴스는 소멸되지 않고 계속 재사용 
여러 개의 요청이 오더라도 1개만 가지고 처리 
=> 수정을 하면 컴파일을 다시 해서 실행시켜야 합니다. 
=>HTML출력이 가능한데 자바 코드를 이용해서 출력 

2.JSP 
=>HttpServlet을 사용하는 것이 어려워서 HTMl태그 안에 자바코드를 삽입할 수 있는 구조로 만들
어준 것 
=>소스코드 형태로 존재하다가 URL요청이 오면 HttpServlet클래스로 변환된 후 Instance를 생성하고
요청을 처리 
이 인스턴스는 요청을 처리하는 것이 종료되면 클래스와 함께 소멸됩니다. 
=>수정을 하고 저장을 하면 컴파일을 다시 할 필요가 없습니다. 
새로 고침만 하면 됩니다. 
=>HTMl을 작성하는 것은 편리하지만 자바코드를 사용하는 것은 Sevlet보다 불편합니다. 

3.Model 2 Pattern 
=>처리하는 로직은 Sevlet에 작성하고 출력하는 로직은 JSP에 작성해서 모듈별로 역활을 분리해서
구현하자는 패턴 
=>모듈별로 분리를 하면 유지보수에 유리 
=>이 단어는 Java에만 해당하는 것이 아니고 다른 웹 프로그래밍에도 그대로 적용 

**Java WebProject 
1. 생성 
=>Dynamic Web Project 를 생성
=>프로젝트 이름
=>프로젝트 위치
=>실행되는 WAS버전 설정 - Target Runtime: 실행될 때 설정해도 됨 
=>Dynamic Web Module - 서블릿 버전 설정 
설치되어 있는 Was가 지원하지 앟는 상위버전을 설정하면 실행이 안됩니다. 

2) 두번째 화면 
=>java source 파일 위치 설정 
여기서 설정한 디렉토리에 java 파일이 위치해야 컴파일 ㅗ디서 class로 만들어 집니다. 
->class 파일의 위치 설정 

3)세번째 화면 
=>시작 경로 및 java파일을 제외한 파일들의 위치를 설정 
=>web.xml을 프로젝트에 생성해 줄지 여부를 설정 : 되도록 이면 체크 

2.jsp파일을 추가하고 실행 
=>jsp파일을 webContent 디렉토리 하위에 작성되어야 합니다. 
3.Tomcat을 이용해서 실행할 떄 발생하는 에러 
1)프로젝트 설정파일에 문제가 발생해서 실행이 안되는 경우 
=>server.xml이나 web.xml파일을 확인 

2)포트 충돌 문제 
=> 이미 톰캣이 실행 중이어서 실행이 안될 수 있습니다. 
윈도우에서 자주 발생 
작업관리자를 실행해서 tomcat이나 java소비스를 모두 중지하고 다시 실행 

=>오라클이 설치되어 있는 경우 오라클이 8080포트를 사용하기 때문에 포트충돌이 발생해서 
실행이 안될 수 있습니다. 
이 때는 톰캣의 실행포트를 변경해주면 됩니다. 

=>톰캣의 실행포트 변경은 현재 워크스페이스의 Servers라는 디렉토리의 setver.xml파일에서 수행 
 <Connector connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443"/>

위의 코드에서 port=8080부분을 다른 번호로 수정 

3)jsp파일을 생성을 하면 맨 윗줄에 에러표시가 발생 
=>실행하는데는 아무런 지장이 없는데 jsp파일을 servlet으로 변환하려면 HttpServlet클래스가 있어야하는데
Java SE버전에는 HttpServlet클래스가 없어서 발생하는 현상 
=>실행할 때 톰캣에는 이 클래스가 있어서 실행은 문제없이 됩니다. 
=> 에러 표시를 없애고자 알 때는 tomcat의 lib디렉토리에 있는 sevlet-api.jar파일을 프로젝트의 
Webcontent/WEB-INF/lib디렉토리에 복사해주면 됩니다. 

4.Sevlet을 만들고 실행 
=>서블릿은 java파일이므로 src 디렉토리에 생성 
1)Servlet클래스는 Httpservlet클래스로부터 상속받으면 됩니다. 

2)두번째 화면에서 URL Mapping부분에 호출할 URL을 설정 
기본은 /클래스이름 - http://localhost:포트번호/프로젝트이름/클래스이름으로 호출 
http://localhost:포트번호/프로젝트이름은 배포를 할 때 도메인으로 치환됩니다. 
주소를 변경하거나 추가할 수 있습니다. 
대부분은 변경을 합	니다. 
Camel표기법에 의하면 클래스이름의 첫글자는 대문자로 하라고 하고  Rest API에서는 도메인에는 대
문자를 포함시키지 말라고 합니다.
URL을 만들때는 소문자와 숫자 및 일부 특수 기호만 사용 

3)서블릿을 호출 
=>서버를 실행시키고 매핑이 되는 주소를브라우저에 입력
=>서블릿을 실행할 때는 바로 안되는 경우가 있으므로 서버를 중지시키고 다시 실행시키는 것이 좋습
니다. 

**Dynamic Web Project 구조 
1.Java Resource/src 
=> Compile되어야 하는 파일이 위치하는 디렉토리 
=> java파일은 반드시 이 디렉토리에 위치해야 합니다. 
=> 컴파일 하지 않는 xml파일등이 위치해도 됩니다. 
Java의 Resources디렉토리는 Webcontent와 매핑 
=>실행이 되면 이 디렉토리는 없어지고 java파일들은 WebContent/WEB-INF/classes라는 디렉토리
에 class파일로 대체되고 그 이외의 파일은 루트 디렉토리로 이동 

2.WebContent 
=>컴파일 할 필요가 없는 파일이 위치하는 디렉토리 
=>실행할 때는 이 디렉토리가 없어지고 루트 디렉토리로 변경됩니다. 
=>프로젝트를 생성하는 방법에 따라서 이 디렉토리를 webapp이라고도 합니다. 

3.WebContent/META-INF
=>외부 자원을 사용하는 경우 외부자원에 대한 정보를 작성하는 파일의 위치 
=>context.xml파일을 생성해서 외부 자원에 대한 경로를 설정 
=>테스트 환경에서 사용하는 자원과 배포 또는 실행 환경에서 사용하는 자원이 서로 다른 경우에 
이 자원에 대한 정보는 소스코드에 직접 작성하지 않고 별도의 파일에 기록해두고 필요하면 파일의 내용을
변경하도록 만드는 것이 좋습니다. 
파일 대신에 Database를 사용하는 것도 좋은 방법이 될 수 있습니다. 

4.WebContent/WEB-INF 
=>웹 애플리케이션에 대한 설정 파일(web.xml)이 위치하는 디렉토리 

5.WebContent/WEB-INF/lib
=>외부 라이브러리 파일이 위치해야하는 디렉토리 
=>Web Application에서는 이 디렉토리에 파일이 위치하면 자동으로 build path에 추가가 됩니다. 

6.WebContent/WEB-INF/classes 
=>클래스파일과 지역화 관련된 파일이 위치해야하는 디렉토리 

** 톰캣 기반의 프로젝트가 실행되는 구조 
=>Eclipse에서 web project를 만들어서 톰캣으로 실행을 하면 실제로는 워크스페이스
/.metedata/.plugins/org.eclipse.wst.server.com/tmp0/wtpwebapps라는 디렉토리에 실행파일
들을 복사해서 실행 
tmp0는 서버생성 횟수에 따라 tmp1, tmp2 등으로 변경될 수 있습니다. 
.이 붙은 디렉토리나 파일은 linux,unix에서 숨김파일입니다. 
shift + command(윈도우키) +.을 누르면 숨김파일이 파인더에서 보입니다. 

=>파일 업로드가 제대로 되고 있는지 확인할 때는 위의 디렉토리에서 확인 

** 설정 파일 
1.context.xml: 외부 자원에 대한 경로 설정을 위한 파일 
=>프로젝트의 META-INF에 위치하는 것이 일반적 

2. web.xml: 웹프로젝트 설정파일 
=>프로젝트의 WEB-INF 디렉토리에 위치 

3.server.xml:톰캣 설정 파일
=>Servers 디렉토리에 위치 

4. 위 3개의 설정 파일은 현재 워크스페이스에 처음 톰캣을 연동할 때 톰캣의 conf 디렉토리에서 복사를 
해와서 사용 
프로젝트에 없으면 servers디렉토리에 있는 파일들을 이용해서 설정 
톰캣의 conf디렉토리의 파일을 수정했으면 워크스페이스에서 서버를 지우고 다시 생성해야 수정한 내용이
반영됩니다. 

**jsp 문서구조 
=>HTML내에 자바코드가 삽입되는 구조로 작성 
=>자바코드를 먼저 실행시켜서 결과를 HTML로 변환하고 그 변환된 결과와 기존 HTML코드를 조합해
서 출력물을 생성 
=>자바 또는 jsp태그와 html코드가 같이 존재하면 자바나 jsp태그를 먼저 해석하고 나머지 html을 
해석합니다. 
=>자바나 jsp태그에서 만든 변수는 javascript나 HTML태그내에서 사용이 가능하지만 javascript가 
만든 변수는 자바나 jsp태그에서 사용 못함 

1.jsp 실행원리
요청 -> JSP -> 서블릿클래스의 소스코드로 변환 -> 소스코드를 컴파일 해서 클래스 파일 생성 ->
인스턴스화(객체생성) -> 필요한 내용을 실행 -> 클래스와 객체 모두 제거 

2.요청이 올때마다 소스 코드를 다시 만들고 객체를 새로 생성하기 때문에 내용이 수정되더라도 저장만하면
바로 반영됩니다. 

3. 소스 코드 
1)<!DOCTYPE..>이전 부분
=>이 영역에 jsp에 대한 설정

1)<!DOCTYPE..>이후 부분
=>출력코드 

4. 구성요소
1)Directive: JSP설정코드 

2)Script: Scriptlit(자바실행코드), Expression(출력코드), Declaration(선언문)

3)Expression Language:자바의 데이터를 출력하기 위한 언어 

4)Implicit Object(내장객체):jsp파일에 처음부터 제공되는 객체 

5)Action Tag: JSP에서 제공하는 특별한 기능을 가진 태그 
java코드를 태그로 변경해 놓은 것 

6)Custom Tag & JSTL 
=>개발자가 만든 태그 


** Directive 
=>JSP설정에 관련된 코드로 <%@로 시작 
=><%@디렉티브이름 속성=값 속성=값 ...> 형태로 작성 
1.디렉티브 이름 
1)page: 현재 페이지 설정  
2)taglib : 외부 태그 라이브러리를 사용하고자 할 때 
3)include : 다른 파일을 포함할 때 사용 

2)page 디렉티브 
=>contentType: jsp가 생성할 결과 문서의 타입을 설정하는 것으로 기본은 text/html
text/json 이 되면 json이 생성 
text/xml이 되면 xml파일이 생성 
text/plain 이 되면 일반 text파일이 생성 

charset을 추가 설정할 수 있는데 생략하면 ISO-8859-1이 됩니다. 

=>import : 외부에 있는 패키지의 클래스의 경로를 줄여쓰기 위한 설정 
<%@ page import="패키지 경로, 패키지 경로..." %>
java.lang, javax.servlet, javax, servlet.jsp, javax.servlet.http패키지는 import할 필요가 없습니다.

=>session: HttpSession의 사용여부를 boolean으로 설정 

=>errorPage:에러가 발생했을 때 보여질 페이지의 URL설정 

=>isErrorPage: 에러페이지 여부를 boolean으로 설정하는데 이 설정에 따라 exception 객체의 사용
여부가 결정됩니다. 
true이면 exception객체를 사용할 수 있고 false이면 exception객체 사용 불가 

=>pageEncoding: 소스 파일의 인코딩 
설정하지 않으면 저장할 때 경고가 발생 

=>isELIgnored: EL의 사용 여부를 boolean으로 설정 

=>trimDirectiveWhiteSpaces: 지시자 바로 다음에 공백이 있을 때 공백을 제거 

3.include 디렉티브 
=>다른 파일의 내용을 가져올 때 사용하는 디렉티브 
=>동일한 디자인을 적용하고 세부 내용만 변경되는 경우 사용 
<%@ include file="포함시킬 파일의 경로" %@>

**스크립트 요소 
=>jsp에서 자바 로직을 사용하기 위한 코드 
1. 자바코드 - scriptlet 
<% 자바코드 %>

2.자바 데이터 출력 - expression 
<%=자바데이터 %> 
=>데이터의 toString()을 호출한 결과가 출력 

3.선언문 - declaration 
=><%tjsdjs%>
지역변수의 개념이라서 jsp파일을 호출할 때 마다 선언되고 초기화 됩니다. 
=><%! 선언 %>
처음 호출될 때 한번만 생성되고 다음부터는 다시 생성하지 않습니다. 
static의 개념 

4.Model 2 MVC Pattern에서는 jsp에 자바코드를 삽입하는 것을 권장하지 않습니다.
Model 2 MVC Pattern을 사용하는 경우에는 스크립트 코드를 거의 사용하지 않습니다. 

5.스크립트는 어떤 식으로 사용하는지 봐두는 정도만 해도 됨 

** JSP 주석 
<%--주소--%>

1.Java 주석 
1)// 한줄주석 
2)/*  여러줄 주석 */
3)/**Java DOC주석 */ 

2. HTML이나 XML주석 
<!-- 주석 -->

3.CSS
/*주석 */ 

4. 자바스크립트 주석 
1)// 한줄주석 
2)/*  여러줄 주석 */

5.JSP주석 
<%-- 주석 -- %>  

6.서블릿, 스프링, 안드로이드 - 자바 
스위프트도 주석은 동일 





































